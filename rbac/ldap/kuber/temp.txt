steps 
1: create ldap service
2: create users
3: create confluent service
4: create produce and consumer service and assign users created from ldap
5: 





MADE THE CONFLUENT SECURE YAML FILE FOR PLATFORM


for docker Avinash provided his docker image

- Image : avinashupadhya99/example_com_openldap:1.0.0 
- For admin use DN - cn=admin,dc=example,dc=com and password secret
  All user's password is the user's cn followed by the parent ou. 
  For example for the user cn=rahul,ou=devops,ou=users,dc=example,dc=com, the password is rahuldevops. 
  For the user cn=will,ou=developers,ou=users,dc=example,dc=com, the password is willdeveloper 
  Note the lack of 's' in the password when the ou is in plural.


- Environment variables :
- LDAP_ORGANISATION="Example Company"
- LDAP_DOMAIN="example.com"
- LDAP_ADMIN_PASSWORD="secret"
- Base DN = dc=example,dc=com




sudo docker run -d --name my-openldap \
    -p 389:389 \
    -p 636:636 \
    -e LDAP_ORGANISATION="Example Company" \
    -e LDAP_DOMAIN="example.com" \
    -e LDAP_ADMIN_PASSWORD="secret" \
    avinashupadhya99/example_com_openldap:1.0.0

use sudo docker ps -a for searching the container.

install ldap-utils and then 

ldapsearch -x -H ldap://localhost -b "dc=example,dc=com" -D "cn=admin,dc=example,dc=com" -w secret

simple LDAP search for OpenLDAP server

-x : simple authentication
-b : specifies base DN
-D : specifes Bind DN
-w secret : specifies the password for bind DN

( can use Apache Directory Studio for DashBoard)


create a YAML file for that docker container of OpenLDAP





yaml file for now consists of autogenerated certs

create certificate authority

cfssl gencert -initca ./certificates/ca-csr.json | cfssljson -bare ca -

validate certificate authority

openssl x509 -in ./certificates/ca.pem -text -noout

make a secret of the certificate authority

kubectl create secret tls ca-pair-sslcerts \
  --cert=./certificates/ca.pem \
  --key=./certificates/ca-key.pem \
  --namespace confluent

providing authentication credentials

make a secret of the credentials

providing rbac principal credentials

first create a secret object for mds (since we have already created key before we can use that itself)

kubectl create secret generic mds-token \
  --from-file=mdsPublicKey.pem=publickey.txt \
  --from-file=mdsTokenKeyPair.pem=tokenkeypair.txt \
  --namespace confluent

kafka rbac credential for kafkaRest

kubectl create secret generic mds-client \
  --from-file=bearer.txt=bearer.txt \
  --namespace confluent


sudo kubectl port-forward openldap-85845bd9b7-gc9f7 10389:389


for checking the kafka cluster id
kafka-cluster cluster-id --bootstrap-server kafka-0.kafka.confluent.svc.cluster.local:9071 --config /opt/confluentinc/kafka.properties




openssl rsa -in private_key.pem -check


RSA key ok
writing RSA key
-----BEGIN RSA PRIVATE KEY-----
MIIEowIBAAKCAQEA3BejCT3rt87BoK06YeqPa+aau9YkTdL3k75UjiJ+ZS9v0cs1
GXjP+OWcp7nqgMqVXTjJFbp53a6n6M8lYLUsAmXejovQfU43aKDCe4eNk2P5l1h0
QWzCtsBe+jPJeo+aLVc8yYGwtPzpBCLvbqDXl4/HAlefgaDpDz9WaRZslvCmtki0
JwiavVB3jnt388j38y8Tmb1zt103elGJ7rd6i2OEjFYNlATzhjEGiwMfp182js7A
aUNvhurfK1T/LzNNSRziBJry1uTwYOyi7LehMTV0ucjeEKriCGMZ5CyMS5tdERpr
qpHcYJoCyS0lixSeKDf4T+ya5PPHyhuLl++QCQIDAQABAoIBAQC4aDmbYb1h2aOU
u/AB4KVgs+wL3CW46z2zFbMFEFO09iULs+Z+vCINGl3Cjty0Iok5fX3GbeLz4gYf
44ge2k3QiIgMCYubofB9As1Q8UenKgoTS/LEaptOwioSG1gCD9YPjVuKPtbPHmUi
qR7SI4PgIoCNLtufojIEK358OGStpdBXT4y/8p2GZORzc3ywXntZUyTV3Ol6KkB/
1YL3yhURVS7pTC30tIb+cGd0TIEN2cm79GUTZSZrfkjLo8bTvazXrfFqebGY0Dy9
hTVVgbEzGlsTq8XSENMXlwpRQj8yuMrklyIdOQFB8NBlUmbAv4VttCROsRpKYKv0
20l3/X69AoGBAP6yTcDNA6aEURC1WeuwSwueXtstbp1F+mgY2onbb3wUTKjFacsH
MX1WYWRjOEsHOZdXQZ3DXdyFR3YDz5udvIbYa526ta9/7YacPYFtWZTjDFYK9MMK
vFpBWcnnuvRt+YMCe89LWig4PkSEkVH9Hik8G1di81bA5OTEz3vdlcl7AoGBAN03
/udc8zn9o1OCGqbq38SLwinYPb19tYpZSGdUcpst7QsHnRZRFXDi2PGxK5hik1Kl
5dAUKKc7cehH1NHHEPr5w3eUOjceNgD4ZqGhuOGEgjiLHOuiP6U1EzcUb9aQ+5zf
7bpVYnsYC552bI/QTY/4gEHmKkYuPFTPfaVaC8tLAoGAdL2XY/LUZIOrgIQPNjd0
/ltV0RJu7AmCMCqMKLn6zJ2lUYpC5ntilLd+JnxP9hvWquakvcIpiIVSbuZqR0Ky
ggA6u240DsANSDDfBC7x64tyQRH+hFOsZ5YiqKfdimHKBuGhjC9WoK6+47r7vN/O
7kmNoq1JKg96Gt2W2IiFOncCgYBiVnsExEgHFl4dSC+q1awFRg9Y5JyFeLVTu964
uEx9+QtvpMHK4t6CIQVJY3W6ts9ApSikt+Fefclj9VKAslo1BwRCSu0aBV8CTWnq
Heb+sRXmJskDYkuimBZjnL0eh7KiCNU3yK8Pgx/fIEugHnvsLQ5uvO875V/CX749
2+p0QwKBgEIOKDSCwQKf9RL/yKfxcg/P83uOloKNIyRm4+AWHaxyX1L/jhzJAYu/
my24MBtl1fMtwJXzeOBhVNW1HBCSYQFcQ44NiFNzPFxqD2wSHx+J5M1G/AaUz705
pcFxscpqUmtuRy4qzONXkpDaktA/YcLK9gMupXmnmV4gUlGwoBuX
-----END RSA PRIVATE KEY-----
